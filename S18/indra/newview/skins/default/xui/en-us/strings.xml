<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<!-- This file contains strings that used to be hardcoded in the source.
     It is only for those strings which don't belong in a floater.
     For example, the strings used in avatar chat bubbles, and strings 
     that are returned from one component and may appear in many places-->
<strings>
	
	<!-- Login -->
	<string name="LoginInProgress">Logging in. [APP_NAME] may appear frozen.  Please wait.</string>
	<string name="LoginAuthenticating">Authenticating</string>
	<string name="LoginMaintenance">Performing account maintenance...</string>
	<string name="LoginAttempt">Previous login attempt failed. Logging in, attempt [NUMBER]</string>
	<string name="LoginPrecaching">Loading world...</string>
	<string name="LoginInitializingBrowser">Initializing embedded web browser...</string>
	<string name="LoginInitializingMultimedia">Initializing multimedia...</string>
	<string name="LoginVerifyingCache">Verifying cache files (can take 60-90 seconds)...</string>
	<string name="LoginProcessingResponse">Processing Response...</string>
	<string name="LoginInitializingWorld">Initializing World...</string>
	<string name="LoginDecodingImages">Decoding images...</string>
	<string name="LoginInitializingQuicktime">Initializing QuickTime...</string>
	<string name="LoginQuicktimeNotFound">QuickTime not found - unable to initialize.</string>
	<string name="LoginQuicktimeOK">QuickTime initialized successfully.</string>
	<string name="LoginWaitingForRegionHandshake">Waiting for region handshake...</string>
	<string name="LoginConnectingToRegion">Connecting to region...</string>
	<string name="LoginDownloadingClothing">Downloading clothing...</string>


	<!-- Disconnection -->
	<string name="AgentLostConnection">This region may be experiencing trouble.  Please check your connection to the Internet.</string>
	
	
	<!-- Tooltip, llhoverview.cpp -->
	<string name="TooltipPerson">Person</string><!-- Object under mouse pointer is an avatar -->
	<string name="TooltipNoName">(no name)</string> <!-- No name on an object -->
	<string name="TooltipOwner">Owner:</string> <!-- Owner name follows -->
	<string name="TooltipPublic">Public</string> <!-- Public permissions on an object -->
	<string name="TooltipIsGroup">(Group)</string> <!-- The name before this text is that of a group -->
	<string name="TooltipFlagScript">Script</string>
	<string name="TooltipFlagPhysics">Physics</string>
	<string name="TooltipFlagTouch">Touch</string>
	<string name="TooltipFlagL$">L$</string>
	<string name="TooltipFlagDropInventory">Drop Inventory</string>
	<string name="TooltipFlagPhantom">Phantom</string>
	<string name="TooltipFlagTemporary">Temporary</string>
	<string name="TooltipFlagRightClickMenu">(Right-click for menu)</string>
	<string name="TooltipFreeToCopy">Free to copy</string>
	<string name="TooltipForSaleL$">For Sale: L$[AMOUNT]</string> <!-- L$ version -->
	<string name="TooltipForSaleMsg">For Sale: [MESSAGE]</string> <!-- Message (RetrievingData) -->
	<string name="TooltipFlagGroupBuild">Group Build</string>
	<string name="TooltipFlagNoBuild">No Build</string>
	<string name="TooltipFlagNoEdit">Group Build</string>
	<string name="TooltipFlagNotSafe">Not Safe</string><!-- damage area -->
	<string name="TooltipFlagNoFly">No Fly</string>
	<string name="TooltipFlagGroupScripts">Group Scripts</string>
	<string name="TooltipFlagNoScripts">No Scripts</string>
	<string name="TooltipLand">Land:</string>
	<string name="TooltipMustSingleDrop">Only a single item can be dragged here</string>	

	
	<!-- Indicates that an avatar's name or other similar datum is being retrieved. General usage. -->
	<string name="RetrievingData">Retrieving...</string>

	<string name="ReleaseNotes">Release Notes</string>

	<!-- Indicates something is being loaded. Maybe should be merged with RetrievingData -->
	<string name="LoadingData">Loading...</string>
	
	
	<!-- namecache -->
	<!-- Avatar name: text shown for LLUUID::null -->
	<string name="AvatarNameNobody">(nobody)</string>
	
	<!-- Avatar name: text shown while fetching name -->
	<string name="AvatarNameWaiting">(waiting)</string>

	<!-- Avatar name: text shown as an alternative to AvatarNameFetching, easter egg. -->
	<string name="AvatarNameHippos">(hippos)</string>
	
	<!-- Group name: text shown for LLUUID::null -->
	<string name="GroupNameNone">(none)</string>
	
	<!-- Asset errors. Used in llassetstorage.cpp, translation from error code to error message. -->
	<string name="AssetErrorNone">No error</string>
	<string name="AssetErrorRequestFailed">Asset request: failed</string>
	<string name="AssetErrorNonexistentFile">Asset request: non-existent file</string>
	<string name="AssetErrorNotInDatabase">Asset request: asset not found in database</string>
	<string name="AssetErrorEOF">End of file</string>
	<string name="AssetErrorCannotOpenFile">Cannot open file</string>
	<string name="AssetErrorFileNotFound">File not found</string>
	<string name="AssetErrorTCPTimeout">File transfer timeout</string>
	<string name="AssetErrorCircuitGone">Circuit gone</string>
	<string name="AssetErrorPriceMismatch">Viewer and server do not agree on price</string>
	<string name="AssetErrorUnknownStatus">Unknown status</string>
	
	<!-- llvoavatar. Displayed in the avatar's chat bubble -->
	<string name="AvatarEditingApparance">(Editing Appearance)</string>
	<string name="AvatarAway">Away</string>
	<string name="AvatarBusy">Busy</string>
	<string name="AvatarMuted">Muted</string>

	<!-- animations -->
	<string name="anim_express_afraid">Afraid</string>
	<string name="anim_express_anger">Angry</string>
	<string name="anim_away">Away</string>
	<string name="anim_backflip">Backflip</string>
	<string name="anim_express_laugh">Belly Laugh</string>
	<string name="anim_express_toothsmile">BigSmile</string>
	<string name="anim_blowkiss">Blow Kiss</string>
	<string name="anim_express_bored">Bored</string>
	<string name="anim_bow">Bow</string>
	<string name="anim_clap">Clap</string>
	<string name="anim_courtbow">Court Bow</string>
	<string name="anim_express_cry">Cry</string>
	<string name="anim_dance1">Dance 1</string>
	<string name="anim_dance2">Dance 2</string>
	<string name="anim_dance3">Dance 3</string>
	<string name="anim_dance4">Dance 4</string>
	<string name="anim_dance5">Dance 5</string>
	<string name="anim_dance6">Dance 6</string>
	<string name="anim_dance7">Dance 7</string>
	<string name="anim_dance8">Dance 8</string>
	<string name="anim_express_disdain">Disdain</string>
	<string name="anim_drink">Drink</string>
	<string name="anim_express_embarrased">Embarrassed</string>
	<string name="anim_angry_fingerwag">Finger Wag</string>
	<string name="anim_fist_pump">Fist Pump</string>
	<string name="anim_yoga_float">Floating Yoga</string>
	<string name="anim_express_frown">Frown</string>
	<string name="anim_impatient">Impatient</string>
	<string name="anim_jumpforjoy">Jump For Joy</string>
	<string name="anim_kissmybutt">Kiss My Butt</string>
	<string name="anim_express_kiss">Kiss</string>
	<string name="anim_laugh_short">Laugh</string>
	<string name="anim_musclebeach">Muscle Beach</string>
	<string name="anim_no_unhappy">No (Unhappy)</string>
	<string name="anim_no_head">No</string>
	<string name="anim_nyanya">Nya-nya-nya</string>
	<string name="anim_punch_onetwo">One-Two Punch</string>
	<string name="anim_express_open_mouth">Open Mouth</string>
	<string name="anim_peace">Peace</string>
	<string name="anim_point_you">Point at Other</string>
	<string name="anim_point_me">Point at Self</string>
	<string name="anim_punch_l">Punch Left</string>
	<string name="anim_punch_r">Punch Right</string>
	<string name="anim_rps_countdown">RPS count</string>
	<string name="anim_rps_paper">RPS paper</string>
	<string name="anim_rps_rock">RPS rock</string>
	<string name="anim_rps_scissors">RPS scissors</string>
	<string name="anim_express_repulsed">Repulsed</string>
	<string name="anim_kick_roundhouse_r">Roundhouse Kick</string>
	<string name="anim_express_sad">Sad</string>
	<string name="anim_salute">Salute</string>
	<string name="anim_shout">Shout</string>
	<string name="anim_express_shrug">Shrug</string>
	<string name="anim_express_smile">Smile</string>
	<string name="anim_smoke_idle">Smoke Idle</string>
	<string name="anim_smoke_inhale">Smoke Inhale</string>
	<string name="anim_smoke_throw_down">Smoke Throw Down</string>
	<string name="anim_express_surprise">Surprise</string>
	<string name="anim_sword_strike_r">Sword Strike</string>
	<string name="anim_angry_tantrum">Tantrum</string>
	<string name="anim_express_tongue_out">TongueOut</string>
	<string name="anim_hello">Wave</string>
	<string name="anim_whisper">Whisper</string>
	<string name="anim_whistle">Whistle</string>
	<string name="anim_express_wink">Wink</string>
	<string name="anim_wink_hollywood">Wink (Hollywood)</string>
	<string name="anim_express_worry">Worry</string>
	<string name="anim_yes_happy">Yes (Happy)</string>
	<string name="anim_yes_head">Yes</string>
	
	<string name="texture_loading">Loading...</string>
	<string name="worldmap_offline">Offline</string>
	
	<!-- Chat -->
	<string name="whisper">whispers:</string>
	<string name="shout">shouts:</string>
	
	<!-- Sim Access labels -->
	<string name="SIM_ACCESS_PG">PG</string>
	<string name="SIM_ACCESS_MATURE">Mature</string>
	<string name="SIM_ACCESS_ADULT">Adult</string>
	<string name="SIM_ACCESS_DOWN">Offline</string>
	<string name="SIM_ACCESS_MIN">Unknown</string>
	
	<!-- For use when we do not have land type back from the server -->
	<string name="land_type_unknown">(unknown)</string>
	
	<!-- Covenant info -->
	<string name="covenant_never_modified">Last Modified: (never)</string>
	<string name="covenant_modified">Last Modified: </string>

	<!-- File load/save dialogs -->
	<string name="all_files">All Files</string>
	<string name="sound_files">Sounds</string>
	<string name="animation_files">Animations</string>
	<string name="image_files">Images</string>
	<string name="save_file_verb">Save</string>
	<string name="load_file_verb">Load</string>
	<string name="targa_image_files">Targa Images</string>
	<string name="bitmap_image_files">Bitmap Images</string>
	<string name="avi_movie_file">AVI Movie File</string>
	<string name="xaf_animation_file">XAF Anim File</string>
	<string name="xml_file">XML File</string>
	<string name="dot_raw_file">RAW File</string>
	<string name="compressed_image_files">Compressed Images</string>
	<string name="load_files">Load Files</string>
	<string name="choose_the_directory">Choose Directory</string>
	
	<!-- LSL Usage Hover Tips -->
	<string name="LSLTipSleepTime">Sleeps script for [SLEEP_TIME] seconds.</string>
	
	<string name="LSLTipText_llSin">float llSin(float theta)\ntheta in radians</string>
	<string name="LSLTipText_llCos">float llCos(float theta)\ntheta in radians</string>
	<string name="LSLTipText_llTan">float llTan(float theta)\ntheta radians</string>
	<string name="LSLTipText_llAtan2">float llAtan2(float y, float x)</string>
	<string name="LSLTipText_llSqrt">float llSqrt(float val)\nreturns 0 and triggers a Math Error for imaginary results</string>
	<string name="LSLTipText_llPow">float llPow(float base, float exponent)\nreturns 0 and triggers Math Error for imaginary results</string>
	<string name="LSLTipText_llAbs">integer llAbs(integer val)</string>
	<string name="LSLTipText_llFabs">float llFabs(float val)</string>
	<string name="LSLTipText_llFrand">float llFrand(float mag)\nreturns random number in range [0,mag)</string>
	<string name="LSLTipText_llFloor">integer llFloor(float val)\nreturns largest integer value &lt;= val</string>
	<string name="LSLTipText_llCeil">integer llCeil(float val)\nreturns smallest integer value &gt;= val</string>
	<string name="LSLTipText_llRound">integer llRound(float val)\nreturns val rounded to the nearest integer</string>
	<string name="LSLTipText_llVecMag">float llVecMag(vector v)\nreturns the magnitude of v</string>
	<string name="LSLTipText_llVecNorm">vector llVecNorm(vector v)\nreturns the v normalized</string>
	<string name="LSLTipText_llVecDist">float llVecDist(vector v1, vector v2)\nreturns the 3D distance between v1 and v2</string>
	<string name="LSLTipText_llRot2Euler">vector llRot2Euler(rotation q)\nreturns the Euler representation (roll, pitch, yaw) of q</string>
	<string name="LSLTipText_llEuler2Rot">rotation llEuler2Rot(vector v)\nreturns the rotation representation of Euler Angles v</string>
	<string name="LSLTipText_llAxes2Rot">rotation llAxes2Rot(vector fwd, vector left, vector up)\nreturns the rotation defined by the coordinate axes</string>
	<string name="LSLTipText_llRot2Fwd">vector llRot2Fwd(rotation q)\nreturns the forward vector defined by q</string>
	<string name="LSLTipText_llRot2Left">vector llRot2Left(rotation q)\nreturns the left vector defined by q</string>
	<string name="LSLTipText_llRot2Up">vector llRot2Up(rotation q)\nreturns the up vector defined by q</string>
	<string name="LSLTipText_llRotBetween">rotation llRotBetween(vector v1, vector v2)\nreturns the rotation to rotate v1 to v2</string>
	<string name="LSLTipText_llWhisper">llWhisper(integer channel, string msg)\nwhispers msg on channel</string>
	<string name="LSLTipText_llSay">llSay(integer channel, string msg)\nsays msg on channel</string>
	<string name="LSLTipText_llShout">llShout(integer channel, string msg)\nshouts msg on channel</string>
	<string name="LSLTipText_llListen">integer llListen(integer channel, string name, key id, string msg)\nsets a callback for msg on channel from name and id (name, id, and/or msg can be empty) and returns an identifier that can be used to deactivate or remove the listen</string>
	<string name="LSLTipText_llListenControl">llListenControl(integer number, integer active)\nmakes a listen event callback active or inactive</string>
	<string name="LSLTipText_llListenRemove">llListenRemove(integer number)\nremoves listen event callback number</string>
	<string name="LSLTipText_llSensor">llSensor(string name, key id, integer type, float range, float arc)\nPerforms a single scan for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0)</string>
	<string name="LSLTipText_llSensorRepeat">llSensorRepeat(string name, key id, integer type, float range, float arc, float rate)\nsets a callback for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0) and repeats every rate seconds</string>
	<string name="LSLTipText_llSensorRemove">llSensorRemove()\nremoves sensor</string>
	<string name="LSLTipText_llDetectedName">string llDetectedName(integer number)\nreturns the name of detected object number (returns empty string if number is not valid sensed object)</string>
	<string name="LSLTipText_llDetectedKey">key llDetectedKey(integer number)\nreturns the key of detected object number (returns empty key if number is not valid sensed object)</string>
	<string name="LSLTipText_llDetectedOwner">key llDetectedOwner(integer number)\nreturns the key of detected object&apos;s owner (returns empty key if number is not valid sensed object)</string>
	<string name="LSLTipText_llDetectedType">integer llDetectedType(integer number)\nreturns the type (AGENT, ACTIVE, PASSIVE, SCRIPTED) of detected object (returns 0 if number is not valid sensed object)</string>
	<string name="LSLTipText_llDetectedPos">vector llDetectedPos(integer number)\nreturns the position of detected object number (returns &lt;0,0,0&gt; if number is not valid sensed object)</string>
	<string name="LSLTipText_llDetectedVel">vector llDetectedVel(integer number)\nreturns the velocity of detected object number (returns &lt;0,0,0&gt; if number is not valid sensed object)</string>
	<string name="LSLTipText_llDetectedGrab">vector llDetectedGrab(integer number)\nreturns the grab offset of the user touching object (returns &lt;0,0,0&gt; if number is not valid sensed object)</string>
	<string name="LSLTipText_llDetectedRot">rotation llDetectedRot(integer number)\nreturns the rotation of detected object number (returns &lt;0,0,0,1&gt; if number is not valid sensed object)</string>
	<string name="LSLTipText_llDetectedGroup">integer llDetectedGroup(integer number)\nReturns TRUE if detected object is part of same group as owner</string>
	<string name="LSLTipText_llDetectedLinkNumber">integer llDetectedLinkNumber(integer number)\nreturns the link position of the triggered event for touches and collisions only</string>
	<string name="LSLTipText_llDie">llDie()\ndeletes the object</string>
	<string name="LSLTipText_llGround">float llGround(vector v)\nreturns the ground height below the object position + v</string>
	<string name="LSLTipText_llCloud">float llCloud(vector v)\nreturns the cloud density at the object position + v</string>
	<string name="LSLTipText_llWind">vector llWind(vector v)\nreturns the wind velocity at the object position + v</string>
	<string name="LSLTipText_llSetStatus">llSetStatus(integer status, integer value)\nsets status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB,\nSTATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z) to value</string>
	<string name="LSLTipText_llGetStatus">integer llGetStatus(integer status)\ngets value of status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB,\nSTATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z)</string>
	<string name="LSLTipText_llSetScale">llSetScale(vector scale)\nsets the scale</string>
	<string name="LSLTipText_llGetScale">vector llGetScale()\ngets the scale</string>
	<string name="LSLTipText_llSetColor">llSetColor(vector color, integer face)\nsets the color</string>
	<string name="LSLTipText_llGetAlpha">float llGetAlpha(integer face)\ngets the alpha</string>
	<string name="LSLTipText_llSetAlpha">llSetAlpha(float alpha, integer face)\nsets the alpha</string>
	<string name="LSLTipText_llGetColor">vector llGetColor(integer face)\ngets the color</string>
	<string name="LSLTipText_llSetTexture">llSetTexture(string texture, integer face)\nsets the texture of face</string>
	<string name="LSLTipText_llScaleTexture">llScaleTexture(float scales, float scalet, integer face)\nsets the texture s, t scales for the chosen face</string>
	<string name="LSLTipText_llOffsetTexture">llOffsetTexture(float offsets, float offsett, integer face)\nsets the texture s, t offsets for the chosen face</string>
	<string name="LSLTipText_llRotateTexture">llRotateTexture(float rotation, integer face)\nsets the texture rotation for the chosen face</string>
	<string name="LSLTipText_llGetTexture">string llGetTexture(integer face)\ngets the texture of face (if it&apos;s a texture in the object inventory, otherwise the key in a string)</string>
	<string name="LSLTipText_llSetPos">llSetPos(vector pos)\nsets the position (if the script isn&apos;t physical)</string>
	<string name="LSLTipText_llGetPos">vector llGetPos()\ngets the position (if the script isn&apos;t physical)</string>
	<string name="LSLTipText_llGetLocalPos">vector llGetLocalPos()\ngets the position relative to the root (if the script isn&apos;t physical)</string>
	<string name="LSLTipText_llSetRot">llSetRot(rotation rot)\nsets the rotation (if the script isn&apos;t physical)</string>
	<string name="LSLTipText_llGetRot">rotation llGetRot()\ngets the rotation (if the script isn&apos;t physical)</string>
	<string name="LSLTipText_llGetLocalRot">rotation llGetLocalRot()\ngets the rotation local to the root (if the script isn&apos;t physical)</string>
	<string name="LSLTipText_llSetForce">llSetForce(vector force, integer local)\nsets force on object, in local coords if local == TRUE (if the script is physical)</string>
	<string name="LSLTipText_llGetForce">vector llGetForce()\ngets the force (if the script is physical)</string>
	<string name="LSLTipText_llTarget">integer llTarget(vector position, float range)\nset positions within range of position as a target and return an ID for the target</string>
	<string name="LSLTipText_llTargetRemove">llTargetRemove(integer number)\nremoves target number</string>
	<string name="LSLTipText_llRotTarget">integer llRotTarget(rotation rot, float error)\nset rotations with error of rot as a rotational target and return an ID for the rotational target</string>
	<string name="LSLTipText_llRotTargetRemove">llRotTargetRemove(integer number)\nremoves rotational target number</string>
	<string name="LSLTipText_llMoveToTarget">llMoveToTarget(vector target, float tau)\ncritically damp to target in tau seconds (if the script is physical)</string>
	<string name="LSLTipText_llStopMoveToTarget">llStopMoveToTarget()\nStops critically damped motion</string>
	<string name="LSLTipText_llApplyImpulse">llApplyImpulse(vector force, integer local)\napplies impulse to object, in local coords if local == TRUE (if the script is physical)</string>
	<string name="LSLTipText_llApplyRotationalImpulse">llApplyRotationalImpulse(vector force, integer local)\napplies rotational impulse to object, in local coords if local == TRUE (if the script is physical)</string>
	<string name="LSLTipText_llSetTorque">llSetTorque(vector torque, integer local)\nsets the torque of object, in local coords if local == TRUE (if the script is physical)</string>
	<string name="LSLTipText_llGetTorque">vector llGetTorque()\ngets the torque (if the script is physical)</string>
	<string name="LSLTipText_llSetForceAndTorque">llSetForceAndTorque(vector force, vector torque, integer local)\nsets the force and torque of object, in local coords if local == TRUE (if the script is physical)</string>
	<string name="LSLTipText_llGetVel">vector llGetVel()\ngets the velocity</string>
	<string name="LSLTipText_llGetAccel">vector llGetAccel()\ngets the acceleration</string>
	<string name="LSLTipText_llGetOmega">vector llGetOmega()\ngets the omega</string>
	<string name="LSLTipText_llGetTimeOfDay">float llGetTimeOfDay()\ngets the time in seconds since Second Life server midnight (or since server up-time; whichever is smaller)</string>
	<string name="LSLTipText_llGetWallclock">float llGetWallclock()\ngets the time in seconds since midnight</string>
	<string name="LSLTipText_llGetTime">float llGetTime()\ngets the time in seconds since creation</string>
	<string name="LSLTipText_llResetTime">llResetTime()\nsets the time to zero</string>
	<string name="LSLTipText_llGetAndResetTime">float llGetAndResetTime()\ngets the time in seconds since creation and sets the time to zero</string>
	<string name="LSLTipText_llSound">llSound(string sound, float volume, integer queue, integer loop)\nplays sound at volume and whether it should loop or not</string>
	<string name="LSLTipText_llPlaySound">llPlaySound(string sound, float volume)\nplays attached sound once at volume (0.0 - 1.0)</string>
	<string name="LSLTipText_llLoopSound">llLoopSound(string sound, float volume)\nplays attached sound looping indefinitely at volume (0.0 - 1.0)</string>
	<string name="LSLTipText_llLoopSoundMaster">llLoopSoundMaster(string sound, float volume)\nplays attached sound looping at volume (0.0 - 1.0), declares it a sync master</string>
	<string name="LSLTipText_llLoopSoundSlave">llLoopSoundSlave(string sound, float volume)\nplays attached sound looping at volume (0.0 - 1.0), synced to most audible sync master</string>
	<string name="LSLTipText_llPlaySoundSlave">llPlaySoundSlave(string sound, float volume)\nplays attached sound once at volume (0.0 - 1.0), synced to next loop of most audible sync master</string>
	<string name="LSLTipText_llTriggerSound">llTriggerSound(string sound, float volume)\nplays sound at volume (0.0 - 1.0), centered at but not attached to object</string>
	<string name="LSLTipText_llStopSound">llStopSound()\nStops currently attached sound</string>
	<string name="LSLTipText_llPreloadSound">llPreloadSound(string sound)\npreloads a sound on viewers within range</string>
	<string name="LSLTipText_llGetSubString">string llGetSubString(string src, integer start, integer end)\nreturns the indicated substring</string>
	<string name="LSLTipText_llDeleteSubString">string llDeleteSubString(string src, integer start, integer end)\nremoves the indicated substring and returns the result</string>
	<string name="LSLTipText_llInsertString">string llInsertString(string dst, integer position, string src)\ninserts src into dst at position and returns the result</string>
	<string name="LSLTipText_llToUpper">string llToUpper(string src)\nconvert src to all upper case and returns the result</string>
	<string name="LSLTipText_llToLower">string llToLower(string src)\nconvert src to all lower case and returns the result</string>
	<string name="LSLTipText_llGiveMoney">llGiveMoney(key destination, integer amount)\ntransfer amount of money from script owner to destination</string>
	<string name="LSLTipText_llMakeExplosion">llMakeExplosion(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)\nMake a round explosion of particles</string>
	<string name="LSLTipText_llMakeFountain">llMakeFountain(integer particles, float scale, float vel, float lifetime, float arc, integer bounce, string texture, vector offset, float bounce_offset)\nMake a fountain of particles</string>
	<string name="LSLTipText_llMakeSmoke">llMakeSmoke(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)\nMake smoke like particles</string>
	<string name="LSLTipText_llMakeFire">llMakeFire(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)\nMake fire like particles</string>
	<string name="LSLTipText_llRezObject">llRezObject(string inventory, vector pos, vector vel, rotation rot, integer param)\nInstanciate owners inventory object at pos with velocity vel and rotation rot with start parameter param</string>
	<string name="LSLTipText_llLookAt">llLookAt(vector target, F32 strength, F32 damping)\nCause object name to point it&apos;s forward axis towards target</string>
	<string name="LSLTipText_llStopLookAt">llStopLookAt()\nStop causing object name to point at a target</string>
	<string name="LSLTipText_llSetTimerEvent">llSetTimerEvent(float sec)\nCause the timer event to be triggered every sec seconds</string>
	<string name="LSLTipText_llSleep">llSleep(float sec)\nPut script to sleep for sec seconds</string>
	<string name="LSLTipText_llGetMass">float llGetMass()\nGet the mass of task name that script is attached to</string>
	<string name="LSLTipText_llCollisionFilter">llCollisionFilter(string name, key id, integer accept)\nif accept == TRUE, only accept collisions with objects name and id (either is optional), otherwise with objects not name or id</string>
	<string name="LSLTipText_llTakeControls">llTakeControls(integer controls, integer accept, integer pass_on)\nTake controls from agent task has permissions for.  If (accept == (controls &amp; input)), send input to task.  If pass_on send to agent also.</string>
	<string name="LSLTipText_llReleaseControls">llReleaseControls()\nStop taking inputs</string>
	<string name="LSLTipText_llAttachToAvatar">llAttachToAvatar(integer attachment)\nAttach to avatar task has permissions for at point attachment</string>
	<string name="LSLTipText_llDetachFromAvatar">llDetachFromAvatar()\nDrop off of avatar</string>
	<string name="LSLTipText_llTakeCamera">llTakeCamera(key avatar)\nMove avatar&apos;s viewpoint to task</string>
	<string name="LSLTipText_llReleaseCamera">llReleaseCamera(key avatar)\nReturn camera to agent</string>
	<string name="LSLTipText_llGetOwner">key llGetOwner()\nReturns the owner of the task</string>
	<string name="LSLTipText_llInstantMessage">llInstantMessage(key user, string message)\nIMs message to the user</string>
	<string name="LSLTipText_llEmail">llEmail(string address, string subject, string message)\nSends email to address with subject and message</string>
	<string name="LSLTipText_llGetNextEmail">llGetNextEmail(string address, string subject)\nGet the next waiting email with appropriate address and/or subject (if blank they are ignored)</string>
	<string name="LSLTipText_llGetKey">key llGetKey()\nGet the key for the task the script is attached to</string>
	<string name="LSLTipText_llSetBuoyancy">llSetBuoyancy(float buoyancy)\nSet the tasks buoyancy (0 is none, &lt; 1.0 sinks, 1.0 floats, > 1.0 rises)</string>
	<string name="LSLTipText_llSetHoverHeight">llSetHoverHeight(float height, integer water, float tau)\nCritically damps to a height (either above ground level or above the higher of land and water if water == TRUE)</string>
	<string name="LSLTipText_llStopHover">llStopHover()\nStop hovering to a height</string>
	<string name="LSLTipText_llMinEventDelay">llMinEventDelay(float delay)\nSet the minimum time between events being handled</string>
	<string name="LSLTipText_llSoundPreload">llSoundPreload(string sound)\npreloads a sound on viewers within range</string>
	<string name="LSLTipText_llRotLookAt">llRotLookAt(rotation target, F32 strength, F32 damping)\nCause object name to point it&apos;s forward axis towards target</string>
	<string name="LSLTipText_llStringLength">integer llStringLength(string str)\nReturns the length of string</string>
	<string name="LSLTipText_llStartAnimation">llStartAnimation(string anim)\nStart animation anim for agent that owns object</string>
	<string name="LSLTipText_llStopAnimation">llStopAnimation(string anim)\nStop animation anim for agent that owns object</string>
	<string name="LSLTipText_llPointAt">llPointAt(vector pos)\nMake agent that owns object point at pos</string>
	<string name="LSLTipText_llStopPointAt">llStopPointAt()\nStop agent that owns object pointing</string>
	<string name="LSLTipText_llTargetOmega">llTargetOmega(vector axis, float spinrate, float gain)\nAttempt to spin at spinrate with strength gain</string>
	<string name="LSLTipText_llGetStartParameter">integer llGetStartParameter()\nGet's the start paramter passed to llRezObject</string>
	<string name="LSLTipText_llGodLikeRezObject">llGodLikeRezObject(key inventory, vector pos)\nrez directly off of a UUID if owner has dog-bit set</string>
	<string name="LSLTipText_llRequestPermissions">llRequestPermissions(key agent, integer perm)\nask agent to allow the script to do perm (NB: Debit, ownership, link, joint, and permission requests can only go to the task's owner)</string>
	<string name="LSLTipText_llGetPermissionsKey">key llGetPermissionsKey()\nReturn agent that permissions are enabled for.  NULL_KEY if not enabled</string>
	<string name="LSLTipText_llGetPermissions">integer llGetPermissions()\nreturn what permissions have been enabled</string>
	<string name="LSLTipText_llGetLinkNumber">integer llGetLinkNumber()\nReturns what number in a link set the script is attached to (0 means no link, 1 the root, 2 for first child, etc)</string>
	<string name="LSLTipText_llSetLinkColor">llSetLinkColor(integer linknumber, vector color, integer face)\nIf a task exists in the link chain at linknumber, set face to color</string>
	<string name="LSLTipText_llCreateLink">llCreateLink(key target, integer parent)\nAttempt to link task script is attached to and target (requires permission PERMISSION_CHANGE_LINKS be set). If parent == TRUE, task script is attached to is the root</string>
	<string name="LSLTipText_llBreakLink">llBreakLink(integer linknum)\nDelinks the task with the given link number (requires permission PERMISSION_CHANGE_LINKS be set)</string>
	<string name="LSLTipText_llBreakAllLinks">llBreakAllLinks()\nDelinks all tasks in the link set (requires permission PERMISSION_CHANGE_LINKS be set)</string>
	<string name="LSLTipText_llGetLinkKey">key llGetLinkKey(integer linknum)\nGet the key of linknumber in link set</string>
	<string name="LSLTipText_llGetLinkName">string llGetLinkName(integer linknum)\nGet the name of linknumber in link set</string>
	<string name="LSLTipText_llGetInventoryNumber">integer llGetInventoryNumber(integer type)\nGet the number of items of a given type in the task's inventory.\nValid types: INVENTORY_TEXTURE, INVENTORY_SOUND, INVENTORY_OBJECT, INVENTORY_SCRIPT, INVENTORY_CLOTHING, INVENTORY_BODYPART, INVENTORY_NOTECARD, INVENTORY_LANDMARK, INVENTORY_ALL</string>
	<string name="LSLTipText_llGetInventoryName">string llGetInventoryName(integer type, integer number)\nGet the name of the inventory item number of type</string>
	<string name="LSLTipText_llSetScriptState">llSetScriptState(string name, integer run)\nControl the state of a script name.</string>
	<string name="LSLTipText_llGetEnergy">float llGetEnergy()\nReturns how much energy is in the object as a percentage of maximum</string>
	<string name="LSLTipText_llGiveInventory">llGiveInventory(key destination, string inventory)\nGive inventory to destination</string>
	<string name="LSLTipText_llRemoveInventory">llRemoveInventory(string inventory)\nRemove the named inventory item</string>
	<string name="LSLTipText_llSetText">llSetText(string text, vector color, float alpha)\nSet text floating over object</string>
	<string name="LSLTipText_llWater">float llWater(vector v)\nreturns the water height below the object position + v</string>
	<string name="LSLTipText_llPassTouches">llPassTouches(integer pass)\nif pass == TRUE, touches are passed from children on to parents (default is FALSE)</string>
	<string name="LSLTipText_llRequestAgentData">key llRequestAgentData(key id, integer data)\nRequests data about agent id.  When data is available the dataserver event will be raised</string>
	<string name="LSLTipText_llRequestInventoryData">key llRequestInventoryData(string name)\nRequests data from object's inventory object.  When data is available the dataserver event will be raised</string>
	<string name="LSLTipText_llSetDamage">llSetDamage(float damage)\nSets the amount of damage that will be done to an object that this task hits.  Task will be killed.</string>
	<string name="LSLTipText_llTeleportAgentHome">llTeleportAgentHome(key id)\nTeleports agent on owner's land to agent's home location</string>
	<string name="LSLTipText_llModifyLand">llModifyLand(integer action, integer size)\nModify land with action (LAND_LEVEL, LAND_RAISE, LAND_LOWER, LAND_SMOOTH, LAND_NOISE, LAND_REVERT)\non size (LAND_SMALL_BRUSH, LAND_MEDIUM_BRUSH, LAND_LARGE_BRUSH)</string>
	<string name="LSLTipText_llCollisionSound">llCollisionSound(string impact_sound, float impact_volume)\nSuppress default collision sounds, replace default impact sounds with impact_sound (empty string to just suppress)</string>
	<string name="LSLTipText_llCollisionSprite">llCollisionSprite(string impact_sprite)\nSuppress default collision sprites, replace default impact sprite with impact_sprite (empty string to just suppress)</string>
	<string name="LSLTipText_llGetAnimation">string llGetAnimation(key id)\nGet the currently playing locomotion animation for avatar id</string>
	<string name="LSLTipText_llResetScript">llResetScript()\nResets the script</string>
	<string name="LSLTipText_llMessageLinked">llMessageLinked(integer linknum, integer num, string str, key id)\nSends num, str, and id to members of the link set (LINK_ROOT sends to root task in a linked set,\nLINK_SET sends to all tasks,\nLINK_ALL_OTHERS to all other tasks,\nLINK_ALL_CHILDREN to all children,\nLINK_THIS to the task the script it is in)</string>
	<string name="LSLTipText_llPushObject">llPushObject(key id, vector impulse, vector ang_impulse, integer local)\nApplies impulse and ang_impulse to object id</string>
	<string name="LSLTipText_llPassCollisions">llPassCollisions(integer pass)\nif pass == TRUE, collisions are passed from children on to parents (default is FALSE)</string>
	<string name="LSLTipText_llGetScriptName">llGetScriptName()\nReturns the script name</string>
	<string name="LSLTipText_llGetNumberOfSides">integer llGetNumberOfSides()\nReturns the number of sides</string>
	<string name="LSLTipText_llAxisAngle2Rot">rotation llAxisAngle2Rot(vector axis, float angle)\nReturns the rotation generated angle about axis</string>
	<string name="LSLTipText_llRot2Axis">vector llRot2Axis(rotation rot)\nReturns the rotation axis represented by rot</string>
	<string name="LSLTipText_llRot2Angle">float llRot2Angle(rotation rot)\nReturns the rotation angle represented by rot</string>
	<string name="LSLTipText_llAcos">float llAcos(float val)\nReturns the arccosine in radians of val</string>
	<string name="LSLTipText_llAsin">float llAsin(float val)\nReturns the arcsine in radians of val</string>
	<string name="LSLTipText_llAngleBetween">float llAngleBetween(rotation a, rotation b)\nReturns angle between rotation a and b</string>
	<string name="LSLTipText_llGetInventoryKey">key llGetInventoryKey(string name)\nReturns the key of the inventory name</string>
	<string name="LSLTipText_llAllowInventoryDrop">llAllowInventoryDrop(integer add)\nIf add == TRUE, users without permissions can still drop inventory items onto task</string>
	<string name="LSLTipText_llGetSunDirection">vector llGetSunDirection()\nReturns the sun direction on the simulator</string>
	<string name="LSLTipText_llGetTextureOffset">vector llGetTextureOffset(integer side)\nReturns the texture offset of side in the x and y components of a vector</string>
	<string name="LSLTipText_llGetTextureScale">vector llGetTextureScale(integer side)\nReturns the texture scale of side in the x and y components of a vector</string>
	<string name="LSLTipText_llGetTextureRot">float llGetTextureRot(integer side)\nReturns the texture rotation of side</string>
	<string name="LSLTipText_llSubStringIndex">integer llSubStringIndex(string source, string pattern)\nFinds index in source where pattern first appears (returns -1 if not found)</string>
	<string name="LSLTipText_llGetOwnerKey">key llGetOwnerKey(key id)\nFind the owner of id</string>
	<string name="LSLTipText_llGetCenterOfMass">vector llGetCenterOfMass()\nGet the object's center of mass</string>
	<string name="LSLTipText_llListSort">list llListSort(list src, integer stride, integer ascending)\nSort the list into blocks of stride in ascending order if ascending == TRUE.  Note that sort only works between same types.</string>
	<string name="LSLTipText_llGetListLength">integer llGetListLength(list src)\nGet the number of elements in the list</string>
	<string name="LSLTipText_llList2Integer">integer llList2Integer(list src, integer index)\nCopy the integer at index in the list</string>
	<string name="LSLTipText_llList2Float">float llList2Float(list src, integer index)\nCopy the float at index in the list</string>
	<string name="LSLTipText_llList2String">string llList2String(list src, integer index)\nCopy the string at index in the list</string>
	<string name="LSLTipText_llList2Key">key llList2Key(list src, integer index)\nCopy the key at index in the list</string>
	<string name="LSLTipText_llList2Vector">vector llList2Vector(list src, integer index)\nCopy the vector at index in the list</string>
	<string name="LSLTipText_llList2Rot">rotation llList2Rot(list src, integer index)\nCopy the rotation at index in the list</string>
	<string name="LSLTipText_llList2List">list llList2List(list src, integer start, integer end)\nCopy the slice of the list from start to end</string>
	<string name="LSLTipText_llDeleteSubList">list llDeleteSubList(list src, integer start, integer end)\nRemove the slice from the list and return the remainder</string>
	<string name="LSLTipText_llGetListEntryType">integer llGetListEntryType(list src, integer index)\nReturns the type of the index entry in the list\n(TYPE_INTEGER, TYPE_FLOAT, TYPE_STRING, TYPE_KEY, TYPE_VECTOR, TYPE_ROTATION, or TYPE_INVALID if index is off list)</string>
	<string name="LSLTipText_llList2CSV">string llList2CSV(list src)\nCreate a string of comma separated values from list</string>
	<string name="LSLTipText_llCSV2List">list llCSV2List(string src)\nCreate a list from a string of comma separated values</string>
	<string name="LSLTipText_llListRandomize">list llListRandomize(list src, integer stride)\nReturns a randomized list of blocks of size stride</string>
	<string name="LSLTipText_llList2ListStrided">list llList2ListStrided(list src, integer start, integer end, integer stride)\nCopy the strided slice of the list from start to end</string>
	<string name="LSLTipText_llGetRegionCorner">vector llGetRegionCorner()\nReturns a vector with the south west corner x,y position of the region the object is in</string>
	<string name="LSLTipText_llListInsertList">list llListInsertList(list dest, list src, integer start)\nInserts src into dest at position start</string>
	<string name="LSLTipText_llListFindList">integer llListFindList(list src, list test)\nReturns the start of the first instance of test in src, -1 if not found</string>
	<string name="LSLTipText_llGetObjectName">string llGetObjectName()\nReturns the name of the object script is attached to</string>
	<string name="LSLTipText_llSetObjectName">llSetObjectName(string name)\nSets the objects name</string>
	<string name="LSLTipText_llGetDate">string llGetDate()\nGets the date as YYYY-MM-DD</string>
	<string name="LSLTipText_llEdgeOfWorld">integer llEdgeOfWorld(vector pos, vector dir)\nChecks to see whether the border hit by dir from pos is the edge of the world (has no neighboring simulator)</string>
	<string name="LSLTipText_llGetAgentInfo">integer llGetAgentInfo(key id)\nGets information about agent ID.\nReturns AGENT_FLYING, AGENT_ATTACHMENTS, AGENT_SCRIPTED, AGENT_SITTING, AGENT_ON_OBJECT, AGENT_MOUSELOOK, AGENT_AWAY, AGENT_BUSY, AGENT_TYPING, AGENT_CROUCHING, AGENT_ALWAYS_RUN, AGENT_WALKING and/or AGENT_IN_AIR.</string>
	<string name="LSLTipText_llAdjustSoundVolume">llAdjustSoundVolume(float volume)\nadjusts volume of attached sound (0.0 - 1.0)</string>
	<string name="LSLTipText_llSetSoundQueueing">llSetSoundQueueing(integer queue)\ndetermines whether attached sound calls wait for the current sound to finish (0 = no [default], nonzero = yes)</string>
	<string name="LSLTipText_llSetSoundRadius">llSetSoundRadius(float radius)\nestablishes a hard cut-off radius for audibility of scripted sounds (both attached and triggered)</string>
	<string name="LSLTipText_llKey2Name">string llKey2Name(key id)\nReturns the name of the object key, iff the object is in the current simulator, otherwise the empty string</string>
	<string name="LSLTipText_llSetTextureAnim">llSetTextureAnim(integer mode, integer face, integer sizex, integer sizey, float start, float length, float rate)\nAnimate the texture on the specified face/faces</string>
	<string name="LSLTipText_llTriggerSoundLimited">llTriggerSoundLimited(string sound, float volume, vector tne, vector bsw)\nplays sound at volume (0.0 - 1.0), centered at but not attached to object, limited to AABB defined by vectors top-north-east and bottom-south-west</string>
	<string name="LSLTipText_llEjectFromLand">llEjectFromLand(key pest)\nEjects pest from land that you own</string>
	<string name="LSLTipText_llParseString2List">list llParseString2List(string src, list separators, list spacers)\nBreaks src into a list, discarding separators, keeping spacers (separators and spacers must be lists of strings, maximum of 8 each)</string>
	<string name="LSLTipText_llOverMyLand">integer llOverMyLand(key id)\nReturns TRUE if id is over land owner of object owns, FALSE otherwise</string>
	<string name="LSLTipText_llGetLandOwnerAt">key llGetLandOwnerAt(vector pos)\nReturns the key of the land owner, NULL_KEY if public</string>
	<string name="LSLTipText_llGetNotecardLine">key llGetNotecardLine(string name, integer line)\nReturns line line of notecard name via the dataserver event</string>
	<string name="LSLTipText_llGetAgentSize">vector llGetAgentSize(key id)\nIf the agent is in the same sim as the object, returns the size of the avatar</string>
	<string name="LSLTipText_llSameGroup">integer llSameGroup(key id)\nReturns TRUE if ID is in the same sim and has the same active group, otherwise FALSE</string>
	<string name="LSLTipText_llUnSit">key llUnSit(key id)\nIf agent identified by id is sitting on the object the script is attached to or is over land owned by the objects owner, the agent is forced to stand up</string>
	<string name="LSLTipText_llGroundSlope">vector llGroundSlope(vector v)\nreturns the ground slope below the object position + v</string>
	<string name="LSLTipText_llGroundNormal">vector llGroundNormal(vector v)\nreturns the ground normal below the object position + v</string>
	<string name="LSLTipText_llGroundContour">vector llGroundCountour(vector v)\nreturns the ground contour below the object position + v</string>
	<string name="LSLTipText_llGetAttached">integer llGetAttached()\nreturns the object attachment point or 0 if not attached</string>
	<string name="LSLTipText_llGetFreeMemory">integer llGetFreeMemory()\nreturns the available heap space for the current script</string>
	<string name="LSLTipText_llGetRegionName">string llGetRegionName()\nreturns the current region name</string>
	<string name="LSLTipText_llGetRegionTimeDilation">float llGetRegionTimeDilation()\nreturns the current time dilation as a float between 0 and 1</string>
	<string name="LSLTipText_llGetRegionFPS">float llGetRegionFPS()\nreturns the mean region frames per second</string>
	<string name="LSLTipText_llParticleSystem">llParticleSystem(list rules)\nCreates a particle system based on rules.  Empty list removes particle system from object.\nList format is [ rule1, data1, rule2, data2 . . . rulen, datan ]</string>
	<string name="LSLTipText_llGroundRepel">llGroundRepel(float height, integer water, float tau)\nCritically damps to height if within height*0.5 of level (either above ground level or above the higher of land and water if water == TRUE)</string>
	<string name="LSLTipText_llGiveInventoryList">llGiveInventoryList(key destination, string category, list inventory)\nGive inventory to destination in a new category</string>
	<string name="LSLTipText_llSetVehicleType">llSetVehicleType(integer type)\nsets vehicle to one of the default types</string>
	<string name="LSLTipText_llSetVehicleFloatParam">llSetVehicleFloatParam(integer param, float value)\nsets the specified vehicle float parameter</string>
	<string name="LSLTipText_llSetVehicleVectorParam">llSetVehicleVectorParam(integer param, vector vec)\nsets the specified vehicle vector parameter</string>
	<string name="LSLTipText_llSetVehicleRotationParam">llSetVehicleVectorParam(integer param, rotation rot)\nsets the specified vehicle rotation parameter</string>
	<string name="LSLTipText_llSetVehicleFlags">llSetVehicleFlags(integer flags)\nsets the enabled bits in 'flags'</string>
	<string name="LSLTipText_llRemoveVehicleFlags">llRemoveVehicleFlags(integer flags)\nremoves the enabled bits in 'flags'</string>
	<string name="LSLTipText_llSitTarget">llSitTarget(vector offset, rotation rot)\nSet the sit location for this object (if offset == &lt;0,0,0&gt; clear it)</string>
	<string name="LSLTipText_llAvatarOnSitTarget">key llAvatarOnSitTarget()\nIf an avatar is sitting on the sit target, return the avatar's key, NULL_KEY otherwise</string>
	<string name="LSLTipText_llAddToLandPassList">llAddToLandPassList(key avatar, float hours)\nAdd avatar to the land pass list for hours</string>
	<string name="LSLTipText_llSetTouchText">llSetTouchText(string text)\nDisplays text in pie menu that acts as a touch</string>
	<string name="LSLTipText_llSetSitText">llSetSitText(string text)\nDisplays text rather than sit in pie menu</string>
	<string name="LSLTipText_llSetCameraEyeOffset">llSetCameraEyeOffset(vector offset)\nSets the camera eye offset used in this object if an avatar sits on it</string>
	<string name="LSLTipText_llSetCameraAtOffset">llSetCameraAtOffset(vector offset)\nSets the camera at offset used in this object if an avatar sits on it</string>
	<string name="LSLTipText_llDumpList2String">string llDumpList2String(list src, string separator)\nWrite the list out in a single string using separator between values</string>
	<string name="LSLTipText_llScriptDanger">integer llScriptDanger(vector pos)\nReturns true if pos is over public land, sandbox land, land that doesn't allow everyone to edit and build, or land that doesn't allow outside scripts</string>
	<string name="LSLTipText_llDialog">llDialog(key avatar, string message, list buttons, integer chat_channel\nShows a dialog box on the avatar's screen with the message.\nUp to 12 strings in the list form buttons.\nIf a button is clicked, the name is chatted on chat_channel.</string>
	<string name="LSLTipText_llVolumeDetect">llVolumeDetect(integer detect)\nIf detect = TRUE, object becomes phantom but triggers collision_start and collision_end events\nwhen other objects start and stop interpenetrating.\nMust be applied to the root object.</string>
	<string name="LSLTipText_llResetOtherScript">llResetOtherScript(string name)\nResets script name</string>
	<string name="LSLTipText_llGetScriptState">integer llGetScriptState(string name)\nResets TRUE if script name is running</string>
	<string name="LSLTipText_llRemoteLoadScript">Deprecated.  Please use llRemoteLoadScriptPin instead.</string>
	<string name="LSLTipText_llSetRemoteScriptAccessPin">llSetRemoteScriptAccessPin(integer pin)\nIf pin is set to a non-zero number, the task will accept remote script\nloads via llRemoteLoadScriptPin if it passes in the correct pin.\nOthersise, llRemoteLoadScriptPin is ignored.</string>
	<string name="LSLTipText_llRemoteLoadScriptPin">llRemoteLoadScriptPin(key target, string name, integer pin, integer running, integer start_param)\nIf the owner of the object this script is attached can modify target,\nthey are in the same region,\nand the matching pin is used,\ncopy script name onto target,\nif running == TRUE, start the script with param.</string>
	<string name="LSLTipText_llOpenRemoteDataChannel">llOpenRemoteDataChannel()\nCreates a channel to listen for XML-RPC calls.  Will trigger a remote_data event with channel id once it is available.</string>
	<string name="LSLTipText_llSendRemoteData">key llSendRemoteData(key channel, string dest, integer idata, string sdata)\nSend an XML-RPC request to dest through channel with payload of channel (in a string), integer idata and string sdata.\nA message identifier key is returned.\nAn XML-RPC reply will trigger a remote_data event and reference the message id.\nThe message_id is returned.</string>
	<string name="LSLTipText_llRemoteDataReply">llRemoteDataReply(key channel, key message_id, string sdata, integer idata)\nSend an XML-RPC reply to message_id on channel with payload of string sdata and integer idata</string>
	<string name="LSLTipText_llCloseRemoteDataChannel">llCloseRemoteDataChannel(key channel)\nCloses XML-RPC channel.</string>
	<string name="LSLTipText_llMD5String">string llMD5String(string src, integer nonce)\nPerforms a RSA Data Security, Inc. MD5 Message-Digest Algorithm on string with nonce.  Returns a 32 character hex string.</string>
	<string name="LSLTipText_llSetPrimitiveParams">llSetPrimitiveParams(list rules)\nSet primitive parameters based on rules.</string>
	<string name="LSLTipText_llStringToBase64">string llStringToBase64(string str)\nConverts a string to the Base 64 representation of the string.</string>
	<string name="LSLTipText_llBase64ToString">string llBase64ToString(string str)\nConverts a Base 64 string to a conventional string.  If the conversion creates any unprintable characters, they are converted to spaces.</string>
	<string name="LSLTipText_llXorBase64Strings">string llXorBase64Strings(string s1, string s2)\nDEPRECATED!  Please use llXorBase64StringsCorrect instead!!  Incorrectly performs an exclusive or on two Base 64 strings and returns a Base 64 string.  s2 repeats if it is shorter than s1.  Retained for backwards compatability.</string>
	<string name="LSLTipText_llRemoteDataSetRegion">llRemoteDataSetRegion()\nIf an object using remote data channels changes regions, you must call this function to reregister the remote data channels.\nYou do not need to make this call if you don't change regions.</string>
	<string name="LSLTipText_llLog10">float llLog10(float val)\nReturns the base 10 log of val if val &gt; 0, otherwise returns 0.</string>
	<string name="LSLTipText_llLog">float llLog(float val)\nReturns the base e log of val if val &gt; 0, otherwise returns 0.</string>
	<string name="LSLTipText_llGetAnimationList">list llGetAnimationList(key id)\nGets a list of all playing animations for avatar id</string>
	<string name="LSLTipText_llSetParcelMusicURL">llSetParcelMusicURL(string url)\nSets the streaming audio URL for the parcel object is on</string>
	<string name="LSLTipText_llGetRootPosition">vector llGetRootPosition()\nGets the global position of the root object of the object script is attached to</string>
	<string name="LSLTipText_llGetRootRotation">rotation llGetRootRotation()\nGets the global rotation of the root object of the object script is attached to</string>
	<string name="LSLTipText_llGetObjectDesc">string llGetObjectDesc()\nReturns the description of the object the script is attached to</string>
	<string name="LSLTipText_llSetObjectDesc">llSetObjectDesc(string name)\nSets the object's description</string>
	<string name="LSLTipText_llGetCreator">key llGetCreator()\nReturns the creator of the object</string>
	<string name="LSLTipText_llGetTimestamp">string llGetTimestamp()\nGets the timestamp in the format: YYYY-MM-DDThh:mm:ss.ff..fZ</string>
	<string name="LSLTipText_llSetLinkAlpha">llSetLinkAlpha(integer linknumber, float alpha, integer face)\nIf a prim exists in the link chain at linknumber, set face to alpha</string>
	<string name="LSLTipText_llGetNumberOfPrims">integer llGetNumberOfPrims()\nReturns the number of prims in a link set the script is attached to</string>
	<string name="LSLTipText_llGetNumberOfNotecardLines">key llGetNumberOfNotecardLines(string name)\nReturns number of lines in notecard 'name' via the dataserver event (cast return value to integer)</string>
	<string name="LSLTipText_llGetBoundingBox">list llGetBoundingBox(key object)\nReturns the bounding box around an object (including any linked prims) relative to the root prim, in a list:  [ (vector) min_corner, (vector) max_corner ]</string>
	<string name="LSLTipText_llGetGeometricCenter">vector llGetGeometricCenter()\nReturns the geometric center of the linked set the script is attached to.</string>
	<string name="LSLTipText_llGetPrimitiveParams">list llGetPrimitiveParams(list params)\nGets primitive parameters specified in the params list.</string>
	<string name="LSLTipText_llIntegerToBase64">string llIntegerToBase64(integer number)\nBig endian encode of of integer as a Base64 string.</string>
	<string name="LSLTipText_llBase64ToInteger">integer llBase64ToInteger(string str)\nBig endian decode of a Base64 string into an integer.</string>
	<string name="LSLTipText_llGetGMTclock">float llGetGMTclock()\nGets the time in seconds since midnight in GMT</string>
	<string name="LSLTipText_llGetSimulatorHostname">string llGetSimulatorHostname()\nGets the hostname of the machine script is running on (same as string in viewer Help dialog)</string>
	<string name="LSLTipText_llSetLocalRot">llSetLocalRot(rotation rot)\nsets the rotation of a child prim relative to the root prim</string>
	<string name="LSLTipText_llParseStringKeepNulls">list llParseStringKeepNulls(string src, list separators, list spacers)\nBreaks src into a list, discarding separators, keeping spacers (separators and spacers must be lists of strings, maximum of 8 each), keeping any null values generated.</string>
	<string name="LSLTipText_llRezAtRoot">llRezAtRoot(string inventory, vector pos, vector vel, rotation rot, integer param)\nInstantiate owner's inventory object at pos with velocity vel and rotation rot with start parameter param.\nThe last selected root object's location will be set to pos</string>
	<string name="LSLTipText_llGetObjectPermMask">integer llGetObjectPermMask(integer mask)\nReturns the requested permission mask for the root object the task is attached to.</string>
	<string name="LSLTipText_llSetObjectPermMask">llSetObjectPermMask(integer mask, integer value)\nSets the given permission mask to the new value on the root object the task is attached to.</string>
	<string name="LSLTipText_llGetInventoryPermMask">integer llGetInventoryPermMask(string item, integer mask)\nReturns the requested permission mask for the inventory item.</string>
	<string name="LSLTipText_llSetInventoryPermMask">llSetInventoryPermMask(string item, integer mask, integer value)\nSets the given permission mask to the new value on the inventory item.</string>
	<string name="LSLTipText_llGetInventoryCreator">key llGetInventoryCreator(string item)\nReturns the key for the creator of the inventory item.</string>
	<string name="LSLTipText_llOwnerSay">llOwnerSay(string msg)\nsays msg to owner only (if owner in sim)</string>
	<string name="LSLTipText_llRequestSimulatorData">key llRequestSimulatorData(string simulator, integer data)\nRequests data about simulator.  When data is available the dataserver event will be raised</string>
	<string name="LSLTipText_llForceMouselook">llForceMouselook(integer mouselook)\nIf mouselook is TRUE any avatar that sits on this object is forced into mouselook mode</string>
	<string name="LSLTipText_llGetObjectMass">float llGetObjectMass(key id)\nGet the mass of the object with key id</string>
	<string name="LSLTipText_llListReplaceList">list llListReplaceList(list dest, list src, integer start, integer end)\nReplaces start through end of dest with src.</string>
	<string name="LSLTipText_llLoadURL">llLoadURL(key avatar_id, string message, string url)\nShows dialog to avatar avatar_id offering to load web page at URL.  If user clicks yes, launches their web browser.</string>
	<string name="LSLTipText_llParcelMediaCommandList">llParcelMediaCommandList(list command)\nSends a list of commands, some with arguments, to a parcel.</string>
	<string name="LSLTipText_llParcelMediaQuery">list llParcelMediaQuery(list query)\nSends a list of queries, returns a list of results.</string>
	<string name="LSLTipText_llModPow">integer llModPow(integer a, integer b, integer c)\nReturns a raised to the b power, mod c. ( (a**b)%c ).  b is capped at 0xFFFF (16 bits).</string>
	<string name="LSLTipText_llGetInventoryType">integer llGetInventoryType(string name)\nReturns the type of the inventory name</string>
	<string name="LSLTipText_llSetPayPrice">llSetPayPrice(integer price, list quick_pay_buttons)\nSets the default amount when someone chooses to pay this object.</string>
	<string name="LSLTipText_llGetCameraPos">vector llGetCameraPos()\nGets current camera position for agent task has permissions for.</string>
	<string name="LSLTipText_llGetCameraRot">rotation llGetCameraRot()\nGets current camera orientation for agent task has permissions for.</string>
	<string name="LSLTipText_llSetPrimURL">llSetPrimURL(string url)\nUpdates the URL for the web page shown on the sides of the object.</string>
	<string name="LSLTipText_llRefreshPrimURL">llRefreshPrimURL()\nReloads the web page shown on the sides of the object.</string>
	<string name="LSLTipText_llEscapeURL">string llEscapeURL(string url)\nReturns and escaped/encoded version of url, replacing spaces with %20 etc.</string>
	<string name="LSLTipText_llUnescapeURL">string llUnescapeURL(string url)\nReturns and unescaped/unencoded version of url, replacing %20 with spaces etc.</string>
	<string name="LSLTipText_llMapDestination">llMapDestination(string simname, vector pos, vector look_at)\nOpens world map centered on region with pos highlighted.\nOnly works for scripts attached to avatar, or during touch events.\n(NOTE: look_at currently does nothing)</string>
	<string name="LSLTipText_llAddToLandBanList">llAddToLandBanList(key avatar, float hours)\nAdd avatar to the land ban list for hours</string>
	<string name="LSLTipText_llRemoveFromLandPassList">llRemoveFromLandPassList(key avatar)\nRemove avatar from the land pass list</string>
	<string name="LSLTipText_llRemoveFromLandBanList">llRemoveFromLandBanList(key avatar)\nRemove avatar from the land ban list</string>
	<string name="LSLTipText_llSetCameraParams">llSetCameraParams(list rules)\nSets multiple camera parameters at once.\nList format is [ rule1, data1, rule2, data2 . . . rulen, datan ]</string>
	<string name="LSLTipText_llClearCameraParams">llClearCameraParams()\nResets all camera parameters to default values and turns off scripted camera control.</string>
	<string name="LSLTipText_llListStatistics">float llListStatistics(integer operation, list l)\nPerform statistical aggregate functions on list l using LIST_STAT_* operations.</string>
	<string name="LSLTipText_llGetUnixTime">integer llGetUnixTime()\nGet the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC from the system clock.</string>
	<string name="LSLTipText_llGetParcelFlags">integer llGetParcelFlags(vector pos)\nGet the parcel flags (PARCEL_FLAG_*) for the parcel including the point pos.</string>
	<string name="LSLTipText_llGetRegionFlags">integer llGetRegionFlags()\nGet the region flags (REGION_FLAG_*) for the region the object is in.</string>
	<string name="LSLTipText_llXorBase64StringsCorrect">string llXorBase64StringsCorrect(string s1, string s2)\nCorrectly performs an exclusive or on two Base 64 strings and returns a Base 64 string.  s2 repeats if it is shorter than s1.</string>
	<string name="LSLTipText_llHTTPRequest">llHTTPRequest(string url, list parameters, string body)\nSend an HTTP request.</string>
	<string name="LSLTipText_llResetLandBanList">llResetLandBanList()\nRemoves all residents from the land ban list.</string>
	<string name="LSLTipText_llResetLandPassList">llResetLandPassList()\nRemoves all residents from the land access/pass list.</string>
	<string name="LSLTipText_llGetObjectPrimCount">integer llGetObjectPrimCount(key object_id)\nReturns the total number of prims for an object.</string>
	<string name="LSLTipText_llGetParcelPrimOwners">list llGetParcelPrimOwners(vector pos)\nReturns a list of all residents who own objects on the parcel and the number of objects they own.\nRequires owner-like permissions for the parcel.</string>
	<string name="LSLTipText_llGetParcelPrimCount">integer llGetParcelPrimCount(vector pos, integer category, integer sim_wide)\nGets the number of prims on the parcel of the given category.\nCategories: PARCEL_COUNT_TOTAL, _OWNER, _GROUP, _OTHER, _SELECTED, _TEMP.</string>
	<string name="LSLTipText_llGetParcelMaxPrims">integer llGetParcelMaxPrims(vector pos, integer sim_wide)\nGets the maximum number of prims allowed on the parcel at pos.</string>
	<string name="LSLTipText_llGetParcelDetails">list llGetParcelDetails(vector pos, list params)\nGets the parcel details specified in params for the parcel at pos.\nParams is one or more of: PARCEL_DETAILS_NAME, _DESC, _OWNER, _GROUP, _AREA</string>
	<string name="LSLTipText_llSetLinkPrimitiveParams">llSetLinkPrimitiveParams(integer linknumber, list rules)\nSet primitive parameters for linknumber based on rules.</string>
	<string name="LSLTipText_llSetLinkTexture">llSetLinkTexture(integer link_pos, string texture, integer face)\nSets the texture of face for link_pos</string>
	<string name="LSLTipText_llStringTrim">string llStringTrim(string src, integer trim_type)\nTrim leading and/or trailing spaces from a string.\nUses trim_type of STRING_TRIM, STRING_TRIM_HEAD or STRING_TRIM_TAIL.</string>
	<string name="LSLTipText_llRegionSay">llRegionSay(integer channel, string msg)\nbroadcasts msg to entire region on channel (not 0.)</string>
	<string name="LSLTipText_llGetObjectDetails">list llGetObjectDetails(key id, list params)\nGets the object details specified in params for the object with key id.\nDetails are OBJECT_NAME, _DESC, _POS, _ROT, _VELOCITY, _OWNER, _GROUP, _CREATOR.</string>
	<string name="LSLTipText_llSetClickAction">llSetClickAction(integer action)\nSets the action performed when a prim is clicked upon.</string>
	<string name="LSLTipText_llGetRegionAgentCount">int llGetRegionAgentCount()\nreturns the number of agents in a region</string>
	<string name="LSLTipText_llTextBox">llTextBox(key avatar, string message, integer chat_channel\nShows a dialog box on the avatar's screen with the message.\nA text box asks for input, and if entered the text is chatted on chat_channel.</string>
	<string name="LSLTipText_llGetAgentLanguage">string llGetAgentLanguage(key id)\nGets the agents preferred language..</string>
	<string name="LSLTipText_llDetectedTouchUV">vector llDetectedTouchUV(integer number)\nreturns the u and v coordinates in the first two components of a vector, for a triggered touch event</string>
	<string name="LSLTipText_llDetectedTouchFace">integer llDetectedTouchFace(integer number)\nreturns the index of the face on the object for a triggered touch event</string>
	<string name="LSLTipText_llDetectedTouchPos">vector llDetectedTouchPos(integer number)\nreturns the position touched for a triggered touch event</string>
	<string name="LSLTipText_llDetectedTouchNormal">vector llDetectedTouchNormal(integer number)\nreturns the surface normal for a triggered touch event</string>
	<string name="LSLTipText_llDetectedTouchBinormal">vector llDetectedTouchBinormal(integer number)\nreturns the surface binormal for a triggered touch event</string>
	<string name="LSLTipText_llDetectedTouchST">vector llDetectedTouchST(integer number)\nreturns the s and t coordinates in the first two components of a vector, for a triggered touch event</string>
	<string name="LSLTipText_llSHA1String">string llSHA1String(string sr)\nPerforms a SHA1 security Hash.  Returns a 40 character hex string.</string>
	<string name="LSLTipText_llGetFreeURLs">integer llGetFreeURLs()\nreturns the available urls for the current script</string>
	<string name="LSLTipText_llRequestURL">key llRequestURL()\nRequests one HTTP:// url for use by this object\nTriggers an http_server event with results.</string>
	<string name="LSLTipText_llRequestSecureURL">key llRequestSecureURL()\nRequests one HTTPS:// (SSL) url for use by this object\nTriggers an http_server event with results.</string>
	<string name="LSLTipText_llReleaseURL">llReleaseURL(string url)\nReleases the specified URL, it will no longer be usable.</string>
	<string name="LSLTipText_llHTTPResponse">llHTTPResponse(key id, integer status, string body)\nResponds to request id with status and body.</string>
	<string name="LSLTipText_llGetHTTPHeader">string llGetHTTPHeader(key id, string header)\nGet the value for header for request id.</string>
</strings>

